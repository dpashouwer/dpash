page <- 1
message("Retrieving page: ", page)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
tidyjson::as.tbl_json() %>%
tidyjson::gather_keys()
next_page <- TRUE
while(next_page){
page <- page + 1
message("Retrieving page: ", page)
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "/&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text")
# test if it's empty
if(page_data == "[]"){
next_page <- FALSE
} else {
# make tbl_json
page_data <- page_data %>%
tidyjson::as.tbl_json() %>%
tidyjson::gather_keys()
# bind to all_entries
all_entries <- rbind_tbl_json(all_entries, page_data)
}
}
all_entries
}
url <- "https://tntp.me/fresno/wp-json/frm/v2/forms/8/"
my_username <- "tntpformidableuser"
my_password <- "fXJ4kSnWXmfEXTE4KVMuRPIO"
page_size = 500
page <- 1
all_entries.raw <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
library(dpash)
all_entries.raw <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
library(jsonlite)
all_entries.raw <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON(
all_entries.raw <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries.raw
all_entries.raw %>% class()
all_entries.raw <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON() %>%
as.data.frame()
all_entries.raw
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries
all_entries %>% class()
all_entries %>% as.tibble()
library(tidyverse)
all_entries %>% as.tibble()
page <- 4
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries
length(all_entries)
page <- 1
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries
page <- 1
message("Retrieving page: ", page)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
next_page <- TRUE
while(next_page){
page <- page + 1
message("Retrieving page: ", page)
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
# test if it's empty
if(page_data == "[]"){
next_page <- FALSE
} else {
# make tbl_json
all_data <- all_data %>% union(page_data)
}
}
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", "6"), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", "6", "&page=", page_size), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries
page <- 1
message("Retrieving page: ", page)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page, "&page=", page_size), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
next_page <- TRUE
page <- page + 1
message("Retrieving page: ", page)
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
page_data
page_data %>% length
page_data %>% class()
# make tbl_json
all_data <- bind_rows(all_data, page_data)
# make tbl_json
all_data <- bind_rows(all_entries, page_data)
page_data
all_entries
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page, "&page=", page_size), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
page_data
# make tbl_json
all_data <- bind_rows(all_entries, page_data)
all_entries
# make tbl_json
all_data <- bind_rows(all_entries, page_data)
all_data %>% head()
all_data %>% head()all_entries
all_entries %>% head()
all_entries[1]
all_entries[1] %>% length()
all_entries[1]
page_data[1]
url <- "https://tntp.me/fresno/wp-json/frm/v2/forms/8/"
my_username <- "tntpformidableuser"
my_password <- "fXJ4kSnWXmfEXTE4KVMuRPIO"
page_size = 500
page <- 1
message("Retrieving page: ", page)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
library(magrittr)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
all_entries[1]
page <- page + 1
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
fromJSON()
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
page_data[1]
all_entries[1]
# make tbl_json
all_entries <- bind_rows(all_entries, page_data)
# make tbl_json
all_entries <- dplyr::bind_rows(all_entries, page_data)
all_entries
all_entries %>% purrr::flatten()
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON() %>%
purrr::flatten()
all_entries
all_entries %>% class()
all_entries %>% as.data.frame()
all_entries %>% as.data.frame() %>% dim()
# make tbl_json
all_entries <- dplyr::union(all_entries, page_data)
all_entries
all_entries
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[-which(names(y) %in% "teacherid")] # this has different length, messes things up, don't need for now
as_tibble(y)
}
raw <- purrr::map_df(all_entries, collapse_list_item_to_df) %>%
select(-`upload-value`)
raw <- purrr::map_df(all_entries, collapse_list_item_to_df)
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[-which(names(y) %in% "teacherid")] # this has different length, messes things up, don't need for now
as_tibble(y)
}
all_entries %>% class()
all_entries
page_data
raw <- purrr::map_df(page_data, collapse_list_item_to_df)
tibble::as_tibble(y)
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[-which(names(y) %in% "teacherid")] # this has different length, messes things up, don't need for now
tibble::as_tibble(y)
}
raw <- purrr::map_df(page_data, collapse_list_item_to_df)
raw
?tibble
?as.tibble
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[-which(names(y) %in% "teacherid")] # this has different length, messes things up, don't need for now
tibble::as_tibble(y)
}
raw <- purrr::map_df(page_data, collapse_list_item_to_df)
raw
page_data %>% flatten()
page_data %>% purrr:flatten()
page_data %>% purrr::flatten()
page_data %>% purrr::flatten() %>% as.tibble()
page_data %>% purrr::flatten() %>% tibble::as.tibble()
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[names(y)] # this has different length, messes things up, don't need for now
tibble::as_tibble(y)
}
page_data %>% purrr::flatten() %>% tibble::as.tibble()
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[names(y) %in% "meta"] # this has different length, messes things up, don't need for now
tibble::as_tibble(y)
}
page_data %>% purrr::flatten() %>% tibble::as.tibble()
page_data %>% collapse_list_item_to_df()
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[names(y)] # this has different length, messes things up, don't need for now
tibble::as_tibble(y)
}
page_data %>% collapse_list_item_to_df()
page_data
#' Pull Formidable Entries
#'
#' @param url website url
#' @param my_username Formidable Username
#' @param my_password Formidable Password
#'
#' @return Returns the Formidable entries as a data frame.
#' @export
pull_formidable_entries_using_jsonlite <- function(url, my_username, my_password, page_size = 500){
page <- 1
message("Retrieving page: ", page)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
next_page <- TRUE
while(next_page){
page <- page + 1
message("Retrieving page: ", page)
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
# test if it's empty
if(page_data == is.data.frame(page_data)){
next_page <- FALSE
} else {
# make tbl_json
all_entries <- dplyr::union(all_entries, page_data)
}
}
all_entries
}
pull_formidable_entries_using_jsonlite(url, my_username, my_password)
page <- page + 1
page <- page + 1
page <- page + 1
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
page_data
page_data %>% is.null()
page_data %>% str()
page_data
page_data == list()
page_data != list()
page_data %>% is.list()
length(page_data)
page <- 1
page <- page + 1
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
page_data
page_data %>% length()
# make tbl_json
all_entries <- dplyr::union(all_entries, page_data)
all_entries
#' Pull Formidable Entries
#'
#' @param url website url
#' @param my_username Formidable Username
#' @param my_password Formidable Password
#'
#' @return Returns the Formidable entries as a data frame.
#' @export
pull_formidable_entries_using_jsonlite <- function(url, my_username, my_password, page_size = 500){
page <- 1
message("Retrieving page: ", page)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
next_page <- TRUE
while(next_page){
page <- page + 1
message("Retrieving page: ", page)
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
# test if it's empty
if(length(page_data) == 0){
next_page <- FALSE
} else {
# make tbl_json
all_entries <- dplyr::union(all_entries, page_data)
}
}
all_entries
}
pull_formidable_entries_using_jsonlite(url, my_username, my_password)
all_entries <- pull_formidable_entries_using_jsonlite(url, my_username, my_password)
all_entries
collapse_list_item_to_df <- function(x){
y <- purrr::flatten(x)
y <- y[names(y)] # this has different length, messes things up, don't need for now
tibble::as_tibble(y)
}
all_entries %>% collapse_list_item_to_df()
raw <- purrr::map_df(all_entries, collapse_list_item_to_df) %>%
select(-`upload-value`)
raw <- purrr::map_df(all_entries, collapse_list_item_to_df)
raw
raw %>% names()
#' Pull Formidable Entries
#'
#' @param url website url
#' @param my_username Formidable Username
#' @param my_password Formidable Password
#'
#' @return Returns the Formidable entries as a data frame.
#' @export
pull_formidable_entries_using_jsonlite <- function(url, my_username, my_password, page_size = 500){
page <- 1
message("Retrieving page: ", page)
all_entries <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
next_page <- TRUE
while(next_page){
page <- page + 1
message("Retrieving page: ", page)
# pull data from website
page_data <- httr::GET(url = paste0(url, "entries?page_size=", page_size, "&page=", page), config = httr::authenticate(my_username, my_password)) %>%
httr::content("text") %>%
jsonlite::fromJSON()
# test if it's empty
if(length(page_data) == 0){
next_page <- FALSE
} else {
# make tbl_json
all_entries <- dplyr::union(all_entries, page_data)
}
}
purrr::map_df(all_entries, collapse_list_item_to_df)
}
all_entries <- pull_formidable_entries_using_jsonlite(url, my_username, my_password)
all_entries
devtools::load_all(".")
devtools::document()
usethis::use_package("jsonlite")
devtools::document()
library(dpash)
devtools::document()
devtools::install()
source('~/GitHub/dpash/R/pull_formidable_entries.R')
devtools::document()
devtools::document()
devtools::load_all(".")
library(dpash)
dpash::pull_formidable_entries()
dpash::pull_formidable_entries
# Load packages - first pacman, installing if necessary, then others
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, readxl, janitor, tidyverse, tidymodels, lubridate) # add more here as needed
if(!require("dpash")) devtools::install_github("dpashouwer/dpash", force = TRUE); p_load(dpash)
url <- "https://tntp.me/fresno/wp-json/frm/v2/forms/8/"
my_username <- "tntpformidableuser"
my_password <- "fXJ4kSnWXmfEXTE4KVMuRPIO"
dpash::pull_formidable_entries(url, my_username, my_password)
source('C:/Users/dustin.pashouwer/Desktop/test pull_formidable_entries.R')
tntpr::bar_chart_counts
obs_data <- read_csv("~/BitBucket/florida-hub/academics/Brevard Walk-throughs/data/clean/obs_data_2018-10-19 13.58.csv")
source('C:/Users/dustin.pashouwer/Desktop/bar_chart_stacked_test.R')
obs_data %>%
gather(question, response, culture_1_expect:culture_6_redirect)
obs_data %>%
gather(question, response, culture_1_expect:culture_6_redirect) %>%
select(question, response)
test <- obs_data %>%
gather(question, response, culture_1_expect:culture_6_redirect) %>%
select(question, response)
test %>%
ggplot(aes(question, fill = response)) +
geom_bar()
test <- obs_data %>%
gather(question, response, culture_1_expect:culture_6_redirect) %>%
select(question, response) %>%
filter(!is.na(response))
test %>%
ggplot(aes(question, fill = response)) +
geom_bar()
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = fill)
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = "stack")
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill())
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill()) +
theme_minimal()
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill()) +
coord_flip()
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill())
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill())
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill()) +
theme(axis.line.y = element_blank(),
axis.line.x = element_line(color = "grey70", size = 0.2),
axis.text.y = element_blank(), axis.text.x = element_text(family = font,
size = font_size), axis.ticks = element_blank(),
axis.title.x = element_text(family = font, size = font_size),
axis.title.y = element_blank(), legend.key = element_blank(),
legend.position = "bottom", legend.text = element_text(family = font,
size = font_size), legend.title = element_blank(),
panel.background = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), plot.title = element_text(family = font,
face = "bold", size = font_size))
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill()) +
theme(axis.line.y = element_blank(),
axis.line.x = element_line(color = "grey70", size = 0.2),
axis.text.y = element_blank(), axis.text.x = element_text(family = font,
size = font_size), axis.ticks = element_blank(),
axis.title.x = element_text(family = "Segoe UI", size = 12),
axis.title.y = element_blank(), legend.key = element_blank(),
legend.position = "bottom", legend.text = element_text(family = font,
size = font_size), legend.title = element_blank(),
panel.background = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), plot.title = element_text(family = font,
face = "bold", size = font_size))
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill()) +
theme(axis.line.y = element_blank(),
axis.line.x = element_line(color = "grey70", size = 0.2),
axis.text.y = element_blank(), axis.text.x = element_text(family = "Segoe UI",
size = 12), axis.ticks = element_blank(),
axis.title.x = element_text(family = "Segoe UI", size = 12),
axis.title.y = element_blank(), legend.key = element_blank(),
legend.position = "bottom", legend.text = element_text(family = font,
size = font_size), legend.title = element_blank(),
panel.background = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), plot.title = element_text(family = font,
face = "bold", size = font_size))
test %>%
ggplot(aes(question, fill = response)) +
geom_bar(position = position_fill()) +
theme(axis.line.y = element_blank(),
axis.line.x = element_line(color = "grey70", size = 0.2),
axis.text.y = element_blank(), axis.text.x = element_text(family = "Segoe UI",
size = 12), axis.ticks = element_blank(),
axis.title.x = element_text(family = "Segoe UI", size = 12),
axis.title.y = element_blank(), legend.key = element_blank(),
legend.position = "bottom", legend.text = element_text(family = "Segoe UI",
size = 12), legend.title = element_blank(),
panel.background = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), plot.title = element_text(family = "Segoe UI",
face = "bold", size = 12))
